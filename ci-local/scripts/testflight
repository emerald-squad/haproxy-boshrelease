#!/bin/bash

set -e
#set -x

: ${BOSH_ENVIRONMENT:?required}
: ${BOSH_CA_CERT:?required}
: ${BOSH_CLIENT:?required}
: ${BOSH_CLIENT_SECRET:?required}
: ${BOSH_DEPLOYMENT:?required}
: ${MANIFEST_PATH:?required}
: ${BLOBSTORE_PATH:?required}

header() {
	echo
	echo "###############################################"
	echo
	echo $*
	echo
}

abs_blobstore_path="${PWD}/${BLOBSTORE_PATH}"

cd ${REPO_ROOT:?required}
header "Pulling in any git submodules..."
git submodule update --init --recursive --force

header "Confirming testflight inputs"

echo "Confirming deployment manifest ${MANIFEST_PATH} exists"
if [[ ! -f ${MANIFEST_PATH} ]]; then
	echo "Deployment manifest ${MANIFEST_PATH} does not exist"
	exit 1
fi

echo "Confirming that \$MANIFEST_VARS is valid"
mkdir -p tmp

# $MANIFEST_VARS must be "key: value" YAML
echo "${MANIFEST_VARS:-"--- {}"}" > tmp/vars.yml
if [[ ! -z $DEBUG ]]; then
	echo "Variables passed to deployment manifest:"
	cat tmp/vars.yml
fi
# convert YAML to JSON to check YAML validity
spruce json tmp/vars.yml > /dev/null

echo "Confirming each operator file exists: ${MANIFEST_OP_PATHS:-ok, none specified.}"
op_patch_file_errors=
for op_patch_file in ${MANIFEST_OP_PATHS//,/ } ; do
	if [[ ! -f $op_patch_file ]]; then
		op_patch_file_errors=1
		echo "Operator file missing"
	fi
done
if [[ ! -z ${op_patch_file_errors} ]]; then
	exit 1
fi

header "Cleaning up from any previous deployments..."
bosh2 -n delete-deployment

header "Creating candidate BOSH release..."
bosh2 -n reset-release # in case dev_releases/ is in repo accidentally

cat > config/final.yml <<YAML
---
final_name: artifactory
blobstore:
  provider: local
  options:
    blobstore_path: ${abs_blobstore_path}
YAML
cp ${abs_blobstore_path}/blobs.yml config/blobs.yml

bosh2 create-release --force

header "Deploying to ${BOSH_ENVIRONMENT}..."
release_name=$(bosh2 int config/final.yml --path /final_name)
release_version=$(spruce json dev_releases/*/index.yml | jq -r ".builds[].version")

bosh2 delete-release -n "${release_name}/${release_version}"
bosh2 upload-release --rebase

cat > tmp/deployment.yml <<YAML
---
- type: replace
  path: /name
  value: ${BOSH_DEPLOYMENT}

- type: replace
  path: /releases/name=${release_name}
  value:
    name: ${release_name}
    version: ${release_version}
YAML

op_patch_files_flags=""
for op_patch_file in ${MANIFEST_OP_PATHS//,/ } ; do
   op_patch_files_flags="${op_patch_files_flags} -o $op_patch_file"
done

bosh2 int ${MANIFEST_PATH} \
  -o tmp/deployment.yml \
  ${op_patch_files_flags} \
  --vars-store tmp/creds.yml \
  --vars-file  tmp/vars.yml  \
  --var-errs \
    > tmp/manifest.yml

bosh2 -n deploy tmp/manifest.yml

TEST_ERRAND=${TEST_ERRAND:-} # backwards compatibility
TEST_ERRANDS=${TEST_ERRANDS:-$TEST_ERRAND}
if [[ -n ${TEST_ERRANDS} ]]; then
	for errand in ${TEST_ERRANDS}; do
		header "Running '${errand}' errand"
		bosh2 -n run-errand ${errand}
	done
else
	echo "No test errands specified, skipping."
fi

if [[ -z ${SKIP_DELETE_DEPLOYMENT:-} ]]; then
	header "Cleaning up after successful deployment..."
	bosh2 -n delete-deployment
else
	header "Skipping cleanup of successful deployment."
fi

echo
echo "SUCCESS"
exit 0