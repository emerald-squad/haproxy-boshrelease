#!/bin/bash

set -e

template_prefix="haproxy"
STEMCELL_OS=${STEMCELL_OS:-ubuntu}

infrastructure=$1
servers=$2

if [[ "$infrastructure" != "aws-ec2" ]] && \
    [[ "$infrastructure" != "openstack" ]] && \
    [[ "$infrastructure" != "warden" ]] || \
    [[ -z "$servers" ]]; then
  echo >&2 "usage: ./make_manifest <aws-ec2|warden|openstack> <backend_server1>,[<backend_server2>,...,<backend_serverN>]"
  exit 1
fi

shift
shift

BOSH_STATUS=$(bosh status)
DIRECTOR_UUID=$(echo "$BOSH_STATUS" | grep UUID | awk '{print $2}')
DIRECTOR_CPI=$(echo "$BOSH_STATUS" | grep CPI | awk '{print $2}' | sed 's/_cpi$//')
DIRECTOR_NAME=$(echo "$BOSH_STATUS" | grep Name | awk '{print $2}')
NAME=$template_prefix-$infrastructure

if [[ $DIRECTOR_NAME = "warden" ]]; then
  if [[ $infrastructure != "warden" ]]; then
    echo "Not targeting bosh-lite with warden CPI. Please use 'bosh target' before running this script."
    exit 1
  fi
fi

if [[ $infrastructure = "aws-ec2" ]]; then
  if [[ $DIRECTOR_CPI != "aws" ]]; then
    echo "Not targeting an AWS BOSH. Please use 'bosh target' before running this script."
    exit 1
  fi
fi

if [[ $infrastructure = "openstack" ]]; then
  if [[ $DIRECTOR_CPI != "openstack" ]]; then
    echo "Not targeting an OpenStack BOSH. Please use 'bosh target' before running this script."
    exit 1
  fi
fi

function latest_uploaded_stemcell {
  echo $(bosh stemcells | grep bosh | grep $STEMCELL_OS | awk -F'|' '{ print $2, $3 }' | sort -nr -k2 | head -n1 | awk '{ print $1 }')
}

STEMCELL=${STEMCELL:-$(latest_uploaded_stemcell)}
if [[ "${STEMCELL}X" == "X" ]]; then
  echo
  echo "Uploading latest $DIRECTOR_CPI/$STEMCELL_OS stemcell..."
  STEMCELL_URL=$(bosh public stemcells --full | grep $DIRECTOR_CPI | grep $STEMCELL_OS | sort -nr | head -n1 | awk '{ print $4 }')
  bosh upload stemcell $STEMCELL_URL
fi
STEMCELL=${STEMCELL:-$(latest_uploaded_stemcell)}

templates=$(dirname $0)
release=$templates/..
tmpdir=$release/tmp

mkdir -p $tmpdir
cat <<EOF > $tmpdir/stub-with-uuid.yml
---
properties:
  ha_proxy:
    backend_servers:
    - ${servers}

name: ${NAME}
director_uuid: ${DIRECTOR_UUID}
EOF


if [[ $(bosh cloud-config | spruce json | jq -r '.networks[] | select(.name == "haproxy") | .name') != "haproxy" ]]; then
	echo >&2 "Your cloud-config does not have the 'haproxy' network in it. See templates/cloud-config-warden.yml for an example."
	exit 1
fi
if [[ $(bosh cloud-config | spruce json | jq -r '.vm_types[] | select(.name == "haproxy") | .name') != "haproxy" ]]; then
	echo >&2 "Your cloud-config does not have the 'haproxy' vm_type in it. See templates/cloud-config-warden.yml for an example."
	exit 1
fi

bosh cloud-config | spruce merge --cherry-pick networks > $tmpdir/cc-networks.yml

if [[ -n "${KEEPALIVED_VIP}" ]]; then
	keepalived=$templates/keepalived.yml
fi

spruce merge --prune networks \
  $templates/haproxy.yml \
  $keepalived \
  $tmpdir/cc-networks.yml \
  $tmpdir/stub-with-uuid.yml \
  $* > $tmpdir/$NAME-manifest.yml

bosh deployment $tmpdir/$NAME-manifest.yml
bosh status
